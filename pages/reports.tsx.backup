import React, { useState, useEffect, useMemo } from 'react';
import {
  Box,
  Button,
  Card,
  CardBody,
  CardHeader,
  Flex,
  HStack,
  VStack,
  FormLabel,
  Heading,
  Text,
  Stack,
  Spinner,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Badge,
  Alert,
  AlertIcon,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  useToast,
  Select,
  Divider,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
} from '@chakra-ui/react';
import { ChevronDownIcon, DownloadIcon } from '@chakra-ui/icons';
import { FiRefreshCw, FiCalendar } from 'react-icons/fi';
import axios from 'axios';

// Define TypeScript interfaces for our report data
interface WeeklyReport {
  week_number: number;
  week_start: string;
  week_end: string;
  year: number;
  month: number; // 1-12 format representing Jan-Dec
  formatted_date: string;
  has_data: boolean;
}

// Array of month names for dropdown (0-indexed for JavaScript Date API)
const MONTHS = [
  "January", "February", "March", "April", "May", "June",
  "July", "August", "September", "October", "November", "December"
];

// Debug mapping of month names to values
console.log('Month mapping for debugging:', 
  MONTHS.map((name, index) => ({ 
    name, 
    jsIndex: index,  // JavaScript month (0-11)
    displayValue: index + 1  // Display value (1-12) 
  }))
);

const ReportsPage = () => {
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [isLoadingReportList, setIsLoadingReportList] = useState<boolean>(true);
  const [reportData, setReportData] = useState<any | null>(null);
  const [weeklyReports, setWeeklyReports] = useState<WeeklyReport[]>([]);
  // Store report data for all weeks
  const [allWeekReports, setAllWeekReports] = useState<{[key: number]: any}>({});
  // Initialize to 2025 and September (month 9) where our data is located
  const [selectedYear, setSelectedYear] = useState<number>(2025);
  const [selectedMonth, setSelectedMonth] = useState<number>(9);
  const [selectedWeek, setSelectedWeek] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);
  const toast = useToast();

  // Consolidated fetch and load function
  const fetchAndLoadAllReports = async (forceRegenerate = false) => {
    console.log('FRONTEND: fetchAndLoadAllReports called with forceRegenerate:', forceRegenerate);
    
    try {
      setIsLoadingReportList(true);
      setError(null);
      
      if (forceRegenerate) {
        toast({
          title: "Regenerating Reports",
          description: "Requesting the latest data from the server...",
          status: "info",
          duration: 3000,
          isClosable: true,
        });
      }
      
      // Step 1: Fetch the weekly reports list
      const response = await axios.get(`/api/reports/weekly-list${forceRegenerate ? '?force=true' : ''}`, {
        timeout: 15000
      });
      
      console.log('FRONTEND: Weekly list API response:', response.data);
      
      if (response.data.success && response.data.data?.weekly_reports) {
        const rawReports = response.data.data.weekly_reports;
        
        const sortedReports = [...rawReports].sort((a, b) => {
          return new Date(b.week_start).getTime() - new Date(a.week_start).getTime();
        });
        
        console.log('FRONTEND: Sorted reports:', sortedReports);
        
        if (sortedReports.length === 0) {
          setError('No weekly reports were generated. Import some payment data first.');
          setWeeklyReports([]);
          return;
        }
        
        setWeeklyReports(sortedReports);
        
        // Step 2: Load all week reports for the current month/year selection
        const currentMonthWeeks = sortedReports.filter(
          report => report.year === selectedYear && report.month === selectedMonth
        );
        
        console.log('FRONTEND: Current month weeks:', currentMonthWeeks);
        
        if (currentMonthWeeks.length > 0) {
          await loadReportsForWeeks(currentMonthWeeks);
          
          // Auto-select the first week if none is selected
          if (!selectedWeek) {
            setSelectedWeek(currentMonthWeeks[0].week_number);
          }
        }
        
      } else {
        throw new Error('Invalid response format from server');
      }
    } catch (err: any) {
      console.error('Error in fetchAndLoadAllReports:', err);
      handleError(err);
    } finally {
      setIsLoadingReportList(false);
    }
  };

  // Error handling function
  const handleError = (err: any) => {
    const currentDate = new Date();
    setWeeklyReports([{
      week_number: 1,
      week_start: currentDate.toISOString().split('T')[0],
      week_end: currentDate.toISOString().split('T')[0],
      year: currentDate.getFullYear(),
      month: currentDate.getMonth() + 1,
      formatted_date: 'Current Week (Fallback)',
      has_data: false
    }]);
    
    if (err.code === 'ECONNABORTED') {
      setError('Connection timed out. The server might be busy or unavailable.');
    } else if (err.message?.includes('Network Error')) {
      setError('Network error. Check your internet connection or the server may be down.');
    } else if (err.response?.status === 404) {
      setError('API endpoint not found. The server may be misconfigured.');
    } else {
      setError(`Failed to load weekly reports: ${err.message || 'Unknown error'}`);
    }
  };

  // Simplified fetchWeeklyReportsList function
  const fetchWeeklyReportsList = async (forceRegenerate = false) => {
    // This function is now handled by fetchAndLoadAllReports
    await fetchAndLoadAllReports(forceRegenerate);
  };

  // Single useEffect to handle initial load
  useEffect(() => {
    console.log('FRONTEND: Initial useEffect triggered');
    fetchAndLoadAllReports();
  }, []); // Only run on mount

  // Handle year/month changes - reload reports for new selection
  useEffect(() => {
    if (weeklyReports.length > 0) {
      console.log('FRONTEND: Year/month changed, reloading reports for new selection');
      
      const newMonthWeeks = weeklyReports.filter(
        report => report.year === selectedYear && report.month === selectedMonth
      );
      
      if (newMonthWeeks.length > 0) {
        setSelectedWeek(null); // Reset selection
        loadReportsForWeeks(newMonthWeeks);
      } else {
        setAllWeekReports({});
        setSelectedWeek(null);
      }
    }
  }, [selectedYear, selectedMonth, weeklyReports]);

  // Handler for generating turkish weekly report
  const generateTurkishWeeklyReport = async (weekNumber: number) => {
    const selectedWeekData = weeklyReports.find(
      report => report.week_number === weekNumber && 
                report.year === selectedYear && 
                report.month === selectedMonth
    );
    
    if (!selectedWeekData) {
      setError('Cannot find selected week data');
      return;
    }
    
    const startDate = selectedWeekData.week_start;
    const endDate = selectedWeekData.week_end;
    
    try {
      setIsLoading(true);
      setError(null);
      
      const response = await axios.get('/api/reports/turkish-weekly', {
        params: {
          start_date: startDate,
          end_date: endDate
        },
        timeout: 15000
      });
      
      if (response.data && response.data.success) {
        setReportData(response.data);
        
        toast({
          title: "Report Generated",
          description: "Weekly collections report has been generated successfully.",
          status: "success",
          duration: 5000,
          isClosable: true,
        });
      } else {
        throw new Error('Invalid response format from server');
      }
    } catch (err) {
      console.error('Error generating weekly report:', err);
      setError('Failed to generate weekly report. The server may be restarting or unavailable.');
      
      setReportData({
        success: false,
        data: {
          report_title: 'Report Unavailable',
          date_range: `${startDate} - ${endDate}`,
          payment_method: 'All',
          weekly_report: [],
          week_totals: null
        }
      });
      
      toast({
        title: "Error",
        description: "Failed to generate the report. Please try again later.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Simplified load reports function - no longer checks has_data flag
  const loadReportsForWeeks = async (weeks: WeeklyReport[]) => {
    console.log('FRONTEND: loadReportsForWeeks called with:', weeks.map(w => w.week_number));
    
    const newAllWeekReports: {[key: number]: any} = {};
    
    // Process weeks in parallel for better performance
    const reportPromises = weeks.map(async (week) => {
      try {
        console.log(`FRONTEND: Loading report for week ${week.week_number} (${week.week_start} to ${week.week_end})`);
        
        const response = await axios.get('/api/reports/turkish-weekly', {
          params: {
            start_date: week.week_start,
            end_date: week.week_end
          },
          timeout: 15000
        });
        
        console.log(`FRONTEND: Week ${week.week_number} response:`, response.data);
        
        return {
          weekNumber: week.week_number,
          data: response.data
        };
        
      } catch (err) {
        console.error(`FRONTEND: Error loading week ${week.week_number}:`, err);
        return {
          weekNumber: week.week_number,
          data: {
            success: false,
            error: `Failed to load week ${week.week_number}`,
            data: {
              weekly_report: [],
              week_totals: null
            }
          }
        };
      }
    });
    
    // Wait for all reports to load
    const results = await Promise.all(reportPromises);
    
    // Populate the reports object
    results.forEach(result => {
      newAllWeekReports[result.weekNumber] = result.data;
    });
    
    console.log('FRONTEND: Setting allWeekReports to:', newAllWeekReports);
    setAllWeekReports(newAllWeekReports);
    
    // Auto-select the first week if none is selected
    if (!selectedWeek && weeks.length > 0) {
      console.log(`FRONTEND: Auto-selecting week ${weeks[0].week_number}`);
      setSelectedWeek(weeks[0].week_number);
    }
  };

  // Handle year selection change
  const handleYearChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedYear(parseInt(e.target.value));
    setSelectedWeek(null);
    setReportData(null);
  };

  // Handle month selection change
  const handleMonthChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const selectedMonthValue = parseInt(e.target.value);
    console.log(`Month changed:`, {
      selectedValue: e.target.value,
      parsedValue: selectedMonthValue,
      monthName: MONTHS[selectedMonthValue - 1]
    });
    
    setSelectedMonth(selectedMonthValue);
    setSelectedWeek(null);
    setReportData(null);
    
    // Log available weeks for the newly selected month
    const weeksForNewMonth = weeklyReports.filter(
      report => report.year === selectedYear && report.month === selectedMonthValue
    );
    
    console.log('Available weeks for newly selected month:', {
      year: selectedYear,
      month: selectedMonthValue,
      monthName: MONTHS[selectedMonthValue - 1],
      availableWeeks: weeksForNewMonth.map(w => w.week_number),
      weekCount: weeksForNewMonth.length
    });
  };

  // Get available years from weekly reports
  const availableYears = useMemo(() => {
    const yearsSet = new Set(weeklyReports.map(report => report.year));
    const years = Array.from(yearsSet);
    return years.sort((a, b) => b - a);
  }, [weeklyReports]);

  // Get available months for the selected year
  const availableMonths = useMemo(() => {
    // Get all distinct months from weekly reports for the selected year
    const monthsWithData = weeklyReports
      .filter(report => report.year === selectedYear)
      .map(report => report.month);
      
    // Filter to distinct values using a more compatible approach
    const months: number[] = [];
    monthsWithData.forEach(month => {
      if (month !== undefined && !months.includes(month)) {
        months.push(month);
      }
    });
    
    // Sort months numerically (January=1, February=2, etc.)
    const sortedMonths = months.sort((a, b) => (a || 0) - (b || 0));
    
    console.log('Available months for year:', {
      year: selectedYear,
      foundMonths: monthsWithData,
      distinctMonths: months,
      sortedMonths: sortedMonths,
      monthNames: sortedMonths.map(m => m !== null && m !== undefined ? MONTHS[m-1] : 'Unknown')
    });
    
    return sortedMonths;
  }, [weeklyReports, selectedYear]);

  // Get weeks for the selected year and month
  const weeksInSelectedMonth = useMemo(() => {
    console.log('Filtering weeks:', { 
      selectedYear, 
      selectedMonth, 
      availableWeeks: weeklyReports.map(r => ({ 
        week: r.week_number, 
        year: r.year, 
        month: r.month, 
        startDate: r.week_start
      }))
    });
    
    const filteredWeeks = weeklyReports.filter(
      report => report.year === selectedYear && report.month === selectedMonth
    ).sort((a, b) => a.week_number - b.week_number);
    
    console.log('Filtered weeks for selected month:', { 
      year: selectedYear, 
      month: selectedMonth, 
      monthName: MONTHS[selectedMonth - 1],  // Convert 1-based month to 0-based index
      filteredWeeks: filteredWeeks.map(w => w.week_number),
      weekCount: filteredWeeks.length
    });
    
    return filteredWeeks;
  }, [weeklyReports, selectedYear, selectedMonth]);

  // Auto-load all week reports when weeks in selected month changes
  useEffect(() => {
    if (weeksInSelectedMonth.length > 0) {
      console.log('FRONTEND: Auto-loading week reports for:', weeksInSelectedMonth.map(w => w.week_number));
      console.log('FRONTEND: Weeks data:', weeksInSelectedMonth);
      loadReportsForWeeks(weeksInSelectedMonth);
    } else {
      console.log('FRONTEND: No weeks to auto-load, weeksInSelectedMonth is empty');
    }
  }, [weeksInSelectedMonth]);

  // Force regenerate all weekly reports
  const handleRegenerateReports = async () => {
    await fetchWeeklyReportsList(true);
    
    toast({
      title: "Reports Updated",
      description: "Weekly reports have been regenerated.",
      status: "success",
      duration: 5000,
      isClosable: true,
    });
  };

  // State for tracking export in progress
  const [isExporting, setIsExporting] = useState<{[key: string]: boolean}>({});

  // Handle export action
  const handleExport = async (format: string, weekNumber: number) => {
    const selectedWeekData = weeklyReports.find(
      report => report.week_number === weekNumber && 
                report.year === selectedYear && 
                report.month === selectedMonth
    );
    
    if (!selectedWeekData) {
      toast({
        title: "Export Failed",
        description: "Cannot find selected week data to export.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
      return;
    }
    
    const startDate = selectedWeekData.week_start;
    const endDate = selectedWeekData.week_end;
    const exportKey = `${weekNumber}-${format}`;
    
    setIsExporting(prev => ({ ...prev, [exportKey]: true }));
    
    try {
      toast({
        title: "Exporting Report",
        description: `Preparing ${format.toUpperCase()} export...`,
        status: "info",
        duration: 2000,
        isClosable: true,
      });
      
      if (format === 'json') {
        const response = await axios.get('/api/reports/export', {
          params: {
            format: 'json',
            start_date: startDate,
            end_date: endDate,
            report_type: 'turkish'
          },
          responseType: 'json',
          timeout: 15000
        });
        
        const fileName = `tahsilat_raporu_${selectedYear}_${selectedMonth}_hafta${weekNumber}.json`;
        const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(response.data, null, 2));
        const downloadAnchorNode = document.createElement('a');
        downloadAnchorNode.setAttribute("href", dataStr);
        downloadAnchorNode.setAttribute("download", fileName);
        document.body.appendChild(downloadAnchorNode);
        downloadAnchorNode.click();
        downloadAnchorNode.remove();
        
        toast({
          title: "Export Complete",
          description: `Report exported as ${fileName}`,
          status: "success",
          duration: 3000,
          isClosable: true,
        });
        
        return;
      }
      
      const response = await axios.get('/api/reports/export', {
        params: {
          format,
          start_date: startDate,
          end_date: endDate,
          report_type: 'turkish'
        },
        responseType: 'blob',
        timeout: 15000
      });
      
      const fileName = `tahsilat_raporu_${selectedYear}_${selectedMonth}_hafta${weekNumber}.${format}`;
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', fileName);
      document.body.appendChild(link);
      link.click();
      link.remove();
      
      window.URL.revokeObjectURL(url);
      
      toast({
        title: "Export Complete",
        description: `Report exported as ${fileName}`,
        status: "success",
        duration: 3000,
        isClosable: true,
      });
      
    } catch (err: any) {
      console.error(`Error exporting report as ${format}:`, err);
      
      let errorMessage = `Failed to export report as ${format.toUpperCase()}.`;
      
      if (err.code === 'ECONNABORTED') {
        errorMessage = 'Export timed out. The server might be busy generating a large file.';
      } else if (err.message?.includes('Network Error')) {
        errorMessage = 'Network error during export. Check your internet connection.';
      } else if (err.response?.status === 404) {
        errorMessage = 'Export API endpoint not found. The server may be misconfigured.';
      }
      
      toast({
        title: "Export Failed",
        description: errorMessage,
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsExporting(prev => {
        const updated = {...prev};
        delete updated[exportKey];
        return updated;
      });
    }
  };

  // Render weekly collections report in the specified format
  const renderWeeklyCollectionsReport = (weekReportData: any) => {
    if (!weekReportData || !weekReportData.success) {
      return (
        <Box p={8} textAlign="center" borderWidth="1px" borderRadius="md" borderStyle="dashed" borderColor="gray.200">
          <Text fontSize="lg" mb={2}>No weekly report data available</Text>
          <Text fontSize="sm" color="gray.500" mb={4}>
            {weekReportData?.error || 'This week may not have any payment data'}
          </Text>
          <HStack spacing={4} justify="center">
            <Button 
              colorScheme="brand" 
              leftIcon={<FiRefreshCw />}
              onClick={() => fetchAndLoadAllReports(true)}
            >
              Refresh Reports
            </Button>
            <Button 
              variant="outline"
              colorScheme="brand" 
              onClick={() => window.location.href = '/import-new'}
            >
              Import New Data
            </Button>
          </HStack>
        </Box>
      );
    }
    
    // Debug log to see what we're getting
    console.log('Frontend - weekReportData:', weekReportData);
    console.log('Frontend - weekly_report data:', weekReportData.data?.weekly_report);
    console.log('Frontend - weekly_report length:', weekReportData.data?.weekly_report?.length);
    
    if (!weekReportData.data?.weekly_report || weekReportData.data.weekly_report.length === 0) {
      return (
        <Box p={8} textAlign="center" borderWidth="1px" borderRadius="md" borderStyle="dashed" borderColor="gray.200">
          <Text fontSize="lg" mb={2}>No payment data found for the selected week</Text>
          <Text fontSize="sm" color="gray.500" mb={4}>
            This week exists but contains no payment transactions
          </Text>
          <Text fontSize="xs" color="gray.400" mt={4}>
            Debug: weekReportData.data exists: {String(!!weekReportData.data)}<br/>
            Debug: weekly_report exists: {String(!!weekReportData.data?.weekly_report)}<br/>
            Debug: weekly_report length: {weekReportData.data?.weekly_report?.length || 'undefined'}
          </Text>
        </Box>
      );
    }
    
    const data = weekReportData.data;
    
    return (
      <Box>
        {/* Report Header */}
        <Box textAlign="center" mb={6} p={4} bg="gray.50" borderRadius="md">
          <Heading size="lg" mb={2} color="brand.600">{data.report_title}</Heading>
          <Text fontSize="xl" fontWeight="bold">{data.date_range}</Text>
          <Text fontSize="md" color="gray.600">{data.payment_method}</Text>
        </Box>
        
        {/* Collections Table */}
        <Box 
          overflowX="auto" 
          bg="white" 
          borderRadius="md" 
          border="1px" 
          borderColor="gray.200" 
          w="100%" 
          mx={0}
          sx={{
            '&::-webkit-scrollbar': {
              height: '8px',
            },
            '&::-webkit-scrollbar-track': {
              background: '#f1f1f1',
            },
            '&::-webkit-scrollbar-thumb': {
              background: '#888',
              borderRadius: '4px',
            },
            '&::-webkit-scrollbar-thumb:hover': {
              background: '#555',
            },
          }}
        >
          <Table 
            variant="simple" 
            size="md" 
            w="100%" 
            style={{ tableLayout: 'auto' }}
            fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif"
          >
            <Thead bg="blue.50">
              <Tr>
                <Th border="1px" borderColor="gray.300" textAlign="center" p={3} minW="50px" maxW="70px">
                  <Text fontSize="sm" fontWeight="bold" color="gray.700" lineHeight="1.2">SIRA NO</Text>
                </Th>
                <Th border="1px" borderColor="gray.300" textAlign="left" p={3} minW="180px" maxW="250px">
                  <Text fontSize="sm" fontWeight="bold" color="gray.700" lineHeight="1.2">MÜŞTERİ ADI SOYADI</Text>
                </Th>
                <Th border="1px" borderColor="gray.300" textAlign="left" p={3} minW="120px" maxW="180px">
                  <Text fontSize="sm" fontWeight="bold" color="gray.700" lineHeight="1.2">PROJE</Text>
                </Th>
                <Th border="1px" borderColor="gray.300" textAlign="center" p={2} minW="100px" maxW="130px">
                  <Text fontSize="sm" fontWeight="bold" color="gray.700" lineHeight="1.1">PAZARTESİ</Text>
                  <Text fontSize="xs" color="blue.600" mt={1}>{data.day_map?.pazartesi}</Text>
                  <Text fontSize="xs" color="blue.600">(USD)</Text>
                </Th>
                <Th border="1px" borderColor="gray.300" textAlign="center" p={2} minW="100px" maxW="130px">
                  <Text fontSize="sm" fontWeight="bold" color="gray.700" lineHeight="1.1">SALI</Text>
                  <Text fontSize="xs" color="blue.600" mt={1}>{data.day_map?.sali}</Text>
                  <Text fontSize="xs" color="blue.600">(USD)</Text>
                </Th>
                <Th border="1px" borderColor="gray.300" textAlign="center" p={2} minW="100px" maxW="130px">
                  <Text fontSize="sm" fontWeight="bold" color="gray.700" lineHeight="1.1">ÇARŞAMBA</Text>
                  <Text fontSize="xs" color="blue.600" mt={1}>{data.day_map?.carsamba}</Text>
                  <Text fontSize="xs" color="blue.600">(USD)</Text>
                </Th>
                <Th border="1px" borderColor="gray.300" textAlign="center" p={2} minW="100px" maxW="130px" bg="blue.50">
                  <Text fontSize="sm" fontWeight="bold" color="gray.700" lineHeight="1.1">PERŞEMBE</Text>
                  <Text fontSize="xs" color="blue.600" mt={1}>{data.day_map?.persembe}</Text>
                  <Text fontSize="xs" color="blue.600">(USD)</Text>
                </Th>
                <Th border="1px" borderColor="gray.300" textAlign="center" p={2} minW="100px" maxW="130px" bg="blue.50">
                  <Text fontSize="sm" fontWeight="bold" color="gray.700" lineHeight="1.1">CUMA</Text>
                  <Text fontSize="xs" color="blue.600" mt={1}>{data.day_map?.cuma}</Text>
                  <Text fontSize="xs" color="blue.600">(USD)</Text>
                </Th>
                <Th border="1px" borderColor="gray.300" textAlign="center" p={2} minW="100px" maxW="130px" bg="blue.50">
                  <Text fontSize="sm" fontWeight="bold" color="gray.700" lineHeight="1.1">CUMARTESİ</Text>
                  <Text fontSize="xs" color="blue.600" mt={1}>{data.day_map?.cumartesi}</Text>
                  <Text fontSize="xs" color="blue.600">(USD)</Text>
                </Th>
                <Th border="1px" borderColor="gray.300" textAlign="center" p={2} minW="100px" maxW="130px" bg="blue.50">
                  <Text fontSize="sm" fontWeight="bold" color="gray.700" lineHeight="1.1">PAZAR</Text>
                  <Text fontSize="xs" color="blue.600" mt={1}>{data.day_map?.pazar}</Text>
                  <Text fontSize="xs" color="blue.600">(USD)</Text>
                </Th>
                <Th border="1px" borderColor="gray.300" textAlign="center" p={2} minW="120px" maxW="160px" bg="blue.50">
                  <Text fontSize="sm" fontWeight="bold" color="gray.700" lineHeight="1.1">GENEL TOPLAM</Text>
                  <Text fontSize="xs" color="blue.600" mt={1}>(USD)</Text>
                </Th>
              </Tr>
            </Thead>
            <Tbody>
              {data.weekly_report.map((row: any, index: number) => (
                <Tr key={index} _hover={{ bg: "gray.50" }}>
                  <Td border="1px" borderColor="gray.300" textAlign="center" p={3} minW="50px" maxW="70px">
                    <Text fontSize="sm" fontWeight="medium" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">{row.sira_no}</Text>
                  </Td>
                  <Td border="1px" borderColor="gray.300" textAlign="left" p={3} minW="180px" maxW="250px">
                    <Text fontSize="sm" fontWeight="medium" lineHeight="1.3" 
                          fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif"
                          overflow="hidden" whiteSpace="nowrap" textOverflow="ellipsis" 
                          title={row.musteri_adi}>
                      {row.musteri_adi}
                    </Text>
                  </Td>
                  <Td border="1px" borderColor="gray.300" textAlign="left" p={3} minW="120px" maxW="180px">
                    <Text fontSize="sm" color="gray.600" lineHeight="1.3"
                          fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif"
                          overflow="hidden" whiteSpace="nowrap" textOverflow="ellipsis" 
                          title={row.proje}>
                      {row.proje}
                    </Text>
                  </Td>
                  
                  {/* Monday */}
                  <Td border="1px" borderColor="gray.300" textAlign="right" p={2} minW="100px" maxW="130px">
                    {row.pazartesi?.usd > 0 ? (
                      <Box>
                        <Text fontSize="sm" fontWeight="medium" lineHeight="1.2" 
                              fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif"
                              whiteSpace="nowrap">
                          ${row.pazartesi.usd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                        {row.pazartesi.original_currency && row.pazartesi.original_currency.includes('TL') && (
                          <Text fontSize="xs" color="blue.600" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">TL</Text>
                        )}
                        {row.pazartesi.original_currency && row.pazartesi.original_currency.includes('EUR') && (
                          <Text fontSize="xs" color="purple.600" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">EUR</Text>
                        )}
                      </Box>
                    ) : (
                      <Text fontSize="sm" color="gray.400" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">-</Text>
                    )}
                  </Td>
                  
                  {/* Tuesday */}
                  <Td border="1px" borderColor="gray.300" textAlign="right" p={2} minW="100px" maxW="130px">
                    {row.sali?.usd > 0 ? (
                      <Box>
                        <Text fontSize="sm" fontWeight="medium" lineHeight="1.2">
                          ${row.sali.usd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                        {row.sali.original_currency && row.sali.original_currency.includes('TL') && (
                          <Text fontSize="xs" color="blue.600">TL</Text>
                        )}
                        {row.sali.original_currency && row.sali.original_currency.includes('EUR') && (
                          <Text fontSize="xs" color="purple.600">EUR</Text>
                        )}
                      </Box>
                    ) : (
                      <Text fontSize="sm" color="gray.400">-</Text>
                    )}
                  </Td>
                  
                  {/* Wednesday */}
                  <Td border="1px" borderColor="gray.300" textAlign="right" p={2} minW="100px" maxW="130px">
                    {row.carsamba?.usd > 0 ? (
                      <Box>
                        <Text fontSize="sm" fontWeight="medium" lineHeight="1.2">
                          ${row.carsamba.usd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                        {row.carsamba.original_currency && row.carsamba.original_currency.includes('TL') && (
                          <Text fontSize="xs" color="blue.600">TL</Text>
                        )}
                        {row.carsamba.original_currency && row.carsamba.original_currency.includes('EUR') && (
                          <Text fontSize="xs" color="purple.600">EUR</Text>
                        )}
                      </Box>
                    ) : (
                      <Text fontSize="sm" color="gray.400">-</Text>
                    )}
                  </Td>
                  
                  {/* Thursday */}
                  <Td border="1px" borderColor="gray.300" textAlign="right" p={2} minW="100px" maxW="130px">
                    {row.persembe?.usd > 0 ? (
                      <Box>
                        <Text fontSize="sm" fontWeight="medium" lineHeight="1.2">
                          ${row.persembe.usd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                        {row.persembe.original_currency && row.persembe.original_currency.includes('TL') && (
                          <Text fontSize="xs" color="blue.600">TL</Text>
                        )}
                        {row.persembe.original_currency && row.persembe.original_currency.includes('EUR') && (
                          <Text fontSize="xs" color="purple.600">EUR</Text>
                        )}
                      </Box>
                    ) : (
                      <Text fontSize="sm" color="gray.400">-</Text>
                    )}
                  </Td>
                  
                  {/* Friday */}
                  <Td border="1px" borderColor="gray.300" textAlign="right" p={2} minW="100px" maxW="130px">
                    {row.cuma?.usd > 0 ? (
                      <Box>
                        <Text fontSize="sm" fontWeight="medium" lineHeight="1.2">
                          ${row.cuma.usd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                        {row.cuma.original_currency && row.cuma.original_currency.includes('TL') && (
                          <Text fontSize="xs" color="blue.600">TL</Text>
                        )}
                        {row.cuma.original_currency && row.cuma.original_currency.includes('EUR') && (
                          <Text fontSize="xs" color="purple.600">EUR</Text>
                        )}
                      </Box>
                    ) : (
                      <Text fontSize="sm" color="gray.400">-</Text>
                    )}
                  </Td>
                  
                  {/* Saturday */}
                  <Td border="1px" borderColor="gray.300" textAlign="right" p={2} minW="100px" maxW="130px">
                    {row.cumartesi?.usd > 0 ? (
                      <Box>
                        <Text fontSize="sm" fontWeight="medium" lineHeight="1.2">
                          ${row.cumartesi.usd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                        {row.cumartesi.original_currency && row.cumartesi.original_currency.includes('TL') && (
                          <Text fontSize="xs" color="blue.600">TL</Text>
                        )}
                        {row.cumartesi.original_currency && row.cumartesi.original_currency.includes('EUR') && (
                          <Text fontSize="xs" color="purple.600">EUR</Text>
                        )}
                      </Box>
                    ) : (
                      <Text fontSize="sm" color="gray.400">-</Text>
                    )}
                  </Td>
                  
                  {/* Sunday */}
                  <Td border="1px" borderColor="gray.300" textAlign="right" p={2} minW="100px" maxW="130px">
                    {row.pazar?.usd > 0 ? (
                      <Box>
                        <Text fontSize="sm" fontWeight="medium" lineHeight="1.2">
                          ${row.pazar.usd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                        {row.pazar.original_currency && row.pazar.original_currency.includes('TL') && (
                          <Text fontSize="xs" color="blue.600">TL</Text>
                        )}
                        {row.pazar.original_currency && row.pazar.original_currency.includes('EUR') && (
                          <Text fontSize="xs" color="purple.600">EUR</Text>
                        )}
                      </Box>
                    ) : (
                      <Text fontSize="sm" color="gray.400">-</Text>
                    )}
                  </Td>
                  
                  {/* Total */}
                  <Td border="1px" borderColor="gray.300" textAlign="right" p={2} bg="blue.50" minW="120px" maxW="160px">
                    {row.genel_toplam?.usd > 0 ? (
                      <Box>
                        <Text fontSize="sm" fontWeight="bold" color="blue.700" lineHeight="1.2">
                          ${row.genel_toplam.usd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                        {row.genel_toplam?.original_currencies && row.genel_toplam.original_currencies.includes('TL') && (
                          <Text fontSize="xs" color="blue.600">TL</Text>
                        )}
                        {row.genel_toplam?.original_currencies && row.genel_toplam.original_currencies.includes('EUR') && (
                          <Text fontSize="xs" color="purple.600">EUR</Text>
                        )}
                      </Box>
                    ) : (
                      <Text fontSize="sm" color="gray.400">-</Text>
                    )}
                  </Td>
                </Tr>
              ))}
              
              {/* Totals Row */}
              {data.week_totals && (
                <Tr bg="gray.100" fontWeight="bold" borderTop="2px" borderColor="gray.400">
                  <Td border="1px" borderColor="gray.400" textAlign="center" p={3}>
                    <Text fontWeight="bold" color="gray.700">GENEL TOPLAM</Text>
                  </Td>
                  <Td border="1px" borderColor="gray.400" p={3}></Td>
                  <Td border="1px" borderColor="gray.400" p={3}></Td>
                  
                  {/* Daily totals in USD */}
                  <Td border="1px" borderColor="gray.400" textAlign="right" p={3}>
                    {data.week_totals.pazartesi?.usd > 0 ? (
                      <Box>
                        <Text fontWeight="bold" color="green.700">
                          ${data.week_totals.pazartesi.usd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                        {data.week_totals.pazartesi.original_currency && data.week_totals.pazartesi.original_currency.includes('TL') && (
                          <Text fontSize="xs" color="blue.600">TL</Text>
                        )}
                        {data.week_totals.pazartesi.original_currency && data.week_totals.pazartesi.original_currency.includes('EUR') && (
                          <Text fontSize="xs" color="purple.600">EUR</Text>
                        )}
                      </Box>
                    ) : (
                      <Text color="gray.400">-</Text>
                    )}
                  </Td>
                  
                  <Td border="1px" borderColor="gray.400" textAlign="right" p={3}>
                    {data.week_totals.sali?.usd > 0 ? (
                      <Box>
                        <Text fontWeight="bold" color="green.700">
                          ${data.week_totals.sali.usd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                        {data.week_totals.sali.original_currency && data.week_totals.sali.original_currency.includes('TL') && (
                          <Text fontSize="xs" color="blue.600">TL</Text>
                        )}
                        {data.week_totals.sali.original_currency && data.week_totals.sali.original_currency.includes('EUR') && (
                          <Text fontSize="xs" color="purple.600">EUR</Text>
                        )}
                      </Box>
                    ) : (
                      <Text color="gray.400">-</Text>
                    )}
                  </Td>
                  
                  <Td border="1px" borderColor="gray.400" textAlign="right" p={3}>
                    {data.week_totals.carsamba?.usd > 0 ? (
                      <Box>
                        <Text fontWeight="bold" color="green.700">
                          ${data.week_totals.carsamba.usd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                        {data.week_totals.carsamba.original_currency && data.week_totals.carsamba.original_currency.includes('TL') && (
                          <Text fontSize="xs" color="blue.600">TL</Text>
                        )}
                        {data.week_totals.carsamba.original_currency && data.week_totals.carsamba.original_currency.includes('EUR') && (
                          <Text fontSize="xs" color="purple.600">EUR</Text>
                        )}
                      </Box>
                    ) : (
                      <Text color="gray.400">-</Text>
                    )}
                  </Td>
                  
                  <Td border="1px" borderColor="gray.400" textAlign="right" p={3}>
                    {data.week_totals.persembe?.usd > 0 ? (
                      <Box>
                        <Text fontWeight="bold" color="green.700">
                          ${data.week_totals.persembe.usd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                        {data.week_totals.persembe.original_currency && data.week_totals.persembe.original_currency.includes('TL') && (
                          <Text fontSize="xs" color="blue.600">TL</Text>
                        )}
                        {data.week_totals.persembe.original_currency && data.week_totals.persembe.original_currency.includes('EUR') && (
                          <Text fontSize="xs" color="purple.600">EUR</Text>
                        )}
                      </Box>
                    ) : (
                      <Text color="gray.400">-</Text>
                    )}
                  </Td>
                  
                  <Td border="1px" borderColor="gray.400" textAlign="right" p={3}>
                    {data.week_totals.cuma?.usd > 0 ? (
                      <Box>
                        <Text fontWeight="bold" color="green.700">
                          ${data.week_totals.cuma.usd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                        {data.week_totals.cuma.original_currency && data.week_totals.cuma.original_currency.includes('TL') && (
                          <Text fontSize="xs" color="blue.600">TL</Text>
                        )}
                        {data.week_totals.cuma.original_currency && data.week_totals.cuma.original_currency.includes('EUR') && (
                          <Text fontSize="xs" color="purple.600">EUR</Text>
                        )}
                      </Box>
                    ) : (
                      <Text color="gray.400">-</Text>
                    )}
                  </Td>
                  
                  <Td border="1px" borderColor="gray.400" textAlign="right" p={3}>
                    {data.week_totals.cumartesi?.usd > 0 ? (
                      <Box>
                        <Text fontWeight="bold" color="green.700">
                          ${data.week_totals.cumartesi.usd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                        {data.week_totals.cumartesi.original_currency && data.week_totals.cumartesi.original_currency.includes('TL') && (
                          <Text fontSize="xs" color="blue.600">TL</Text>
                        )}
                        {data.week_totals.cumartesi.original_currency && data.week_totals.cumartesi.original_currency.includes('EUR') && (
                          <Text fontSize="xs" color="purple.600">EUR</Text>
                        )}
                      </Box>
                    ) : (
                      <Text color="gray.400">-</Text>
                    )}
                  </Td>
                  
                  <Td border="1px" borderColor="gray.400" textAlign="right" p={3}>
                    {data.week_totals.pazar?.usd > 0 ? (
                      <Box>
                        <Text fontWeight="bold" color="green.700">
                          ${data.week_totals.pazar.usd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                        {data.week_totals.pazar.original_currency && data.week_totals.pazar.original_currency.includes('TL') && (
                          <Text fontSize="xs" color="blue.600">TL</Text>
                        )}
                        {data.week_totals.pazar.original_currency && data.week_totals.pazar.original_currency.includes('EUR') && (
                          <Text fontSize="xs" color="purple.600">EUR</Text>
                        )}
                      </Box>
                    ) : (
                      <Text color="gray.400">-</Text>
                    )}
                  </Td>
                  
                  {/* Grand Total */}
                  <Td border="1px" borderColor="gray.400" textAlign="right" p={3} bg="green.100">
                    {data.week_totals.genel_toplam?.usd > 0 ? (
                      <Box>
                        <Text fontSize="lg" fontWeight="bold" color="green.800">
                          ${data.week_totals.genel_toplam.usd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                        {data.week_totals.genel_toplam.original_currencies && data.week_totals.genel_toplam.original_currencies.includes('TL') && (
                          <Text fontSize="xs" color="blue.600">TL</Text>
                        )}
                        {data.week_totals.genel_toplam.original_currencies && data.week_totals.genel_toplam.original_currencies.includes('EUR') && (
                          <Text fontSize="xs" color="purple.600">EUR</Text>
                        )}
                      </Box>
                    ) : (
                      <Text color="gray.400">-</Text>
                    )}
                  </Td>
                </Tr>
              )}
            </Tbody>
          </Table>
        </Box>
        
        {/* Check Payments Table - Only show if there are check payments */}
        {data.check_payments && data.check_payments.length > 0 && (
          <Box mt={8}>
            <Heading size="md" mb={4} textAlign="center" color="purple.600">
              HAFTALIK GENEL TAHSİLATLAR (ÇEK ÖDEMELERİ)
            </Heading>
            <Box 
              overflowX="auto" 
              bg="white" 
              borderRadius="md" 
              border="1px" 
              borderColor="purple.200" 
              w="100%" 
              mx={0}
              css={{
                '&::-webkit-scrollbar': {
                  height: '8px',
                },
                '&::-webkit-scrollbar-track': {
                  background: '#f1f1f1',
                },
                '&::-webkit-scrollbar-thumb': {
                  background: '#888',
                  borderRadius: '4px',
                },
                '&::-webkit-scrollbar-thumb:hover': {
                  background: '#555',
                },
              }}
            >
              <Table 
                variant="simple" 
                size="sm" 
                w="100%" 
                minW="1400px"
                style={{ tableLayout: 'fixed' }}
              >
                <Thead bg="purple.50">
                  <Tr>
                    <Th 
                      border="1px" 
                      borderColor="purple.300" 
                      textAlign="center" 
                      p={3} 
                      width="50px"
                      color="purple.800"
                    >
                      S.No
                    </Th>
                    <Th 
                      border="1px" 
                      borderColor="purple.300" 
                      textAlign="center" 
                      p={3} 
                      width="200px"
                      color="purple.800"
                    >
                      Müşteri Adı Soyadı
                    </Th>
                    <Th 
                      border="1px" 
                      borderColor="purple.300" 
                      textAlign="center" 
                      p={3} 
                      width="150px"
                      color="purple.800"
                    >
                      Proje
                    </Th>
                    <Th 
                      border="1px" 
                      borderColor="purple.300" 
                      textAlign="center" 
                      p={3} 
                      width="140px"
                      color="purple.800"
                    >
                      Pazartesi<br/>{data.day_map?.pazartesi}
                    </Th>
                    <Th 
                      border="1px" 
                      borderColor="purple.300" 
                      textAlign="center" 
                      p={3} 
                      width="140px"
                      color="purple.800"
                    >
                      Salı<br/>{data.day_map?.sali}
                    </Th>
                    <Th 
                      border="1px" 
                      borderColor="purple.300" 
                      textAlign="center" 
                      p={3} 
                      width="140px"
                      color="purple.800"
                    >
                      Çarşamba<br/>{data.day_map?.carsamba}
                    </Th>
                    <Th 
                      border="1px" 
                      borderColor="purple.300" 
                      textAlign="center" 
                      p={3} 
                      width="140px"
                      color="purple.800"
                    >
                      Perşembe<br/>{data.day_map?.persembe}
                    </Th>
                    <Th 
                      border="1px" 
                      borderColor="purple.300" 
                      textAlign="center" 
                      p={3} 
                      width="140px"
                      color="purple.800"
                    >
                      Cuma<br/>{data.day_map?.cuma}
                    </Th>
                    <Th 
                      border="1px" 
                      borderColor="purple.300" 
                      textAlign="center" 
                      p={3} 
                      width="140px"
                      color="purple.800"
                    >
                      Cumartesi<br/>{data.day_map?.cumartesi}
                    </Th>
                    <Th 
                      border="1px" 
                      borderColor="purple.300" 
                      textAlign="center" 
                      p={3} 
                      width="140px"
                      color="purple.800"
                    >
                      Pazar<br/>{data.day_map?.pazar}
                    </Th>
                    <Th 
                      border="1px" 
                      borderColor="purple.300" 
                      textAlign="center" 
                      p={3} 
                      width="150px"
                      color="purple.800"
                    >
                      Genel Toplam (TL)
                    </Th>
                    <Th 
                      border="1px" 
                      borderColor="purple.300" 
                      textAlign="center" 
                      p={3} 
                      width="150px"
                      color="purple.800"
                    >
                      Genel Toplam (USD)
                    </Th>
                  </Tr>
                </Thead>
                <Tbody>
                  {/* Check Payment Rows */}
                  {data.check_payments.map((row: any, index: number) => (
                    <Tr key={index} _hover={{ bg: "purple.25" }}>
                      <Td border="1px" borderColor="purple.200" textAlign="center" p={2}>
                        <Text fontSize="sm" fontWeight="bold">{row.sira_no}</Text>
                      </Td>
                      <Td border="1px" borderColor="purple.200" p={2}>
                        <Text fontSize="sm" fontWeight="medium">{row.musteri_adi}</Text>
                      </Td>
                      <Td border="1px" borderColor="purple.200" p={2}>
                        <Text fontSize="sm">{row.proje}</Text>
                      </Td>
                      
                      {/* Daily Check Payment Values - Show TL amounts */}
                      {['pazartesi', 'sali', 'carsamba', 'persembe', 'cuma', 'cumartesi', 'pazar'].map((day) => (
                        <Td key={day} border="1px" borderColor="purple.200" textAlign="right" p={2}>
                          {row[day]?.usd > 0 || row[day]?.tl > 0 ? (
                            <Box>
                              <Text fontSize="sm" fontWeight="bold" color="purple.700">
                                ₺{(row[day].tl || 0).toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                              </Text>
                              {row[day].original_currency && (
                                <Text fontSize="xs" color="gray.600">{row[day].original_currency}</Text>
                              )}
                            </Box>
                          ) : (
                            <Text fontSize="sm" color="gray.400">-</Text>
                          )}
                        </Td>
                      ))}
                      
                      {/* Check Payment Total - TL Column */}
                      <Td border="1px" borderColor="purple.200" textAlign="right" p={2} bg="purple.50">
                        {row.genel_toplam?.tl > 0 ? (
                          <Text fontSize="sm" fontWeight="bold" color="purple.700">
                            ₺{(row.genel_toplam.tl || 0).toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                          </Text>
                        ) : (
                          <Text fontSize="sm" color="gray.400">-</Text>
                        )}
                      </Td>
                      
                      {/* Check Payment Total - USD Column */}
                      <Td border="1px" borderColor="purple.200" textAlign="right" p={2} bg="purple.50">
                        {row.genel_toplam?.usd > 0 ? (
                          <Text fontSize="sm" fontWeight="bold" color="purple.700">
                            ${(row.genel_toplam.usd || 0).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                          </Text>
                        ) : (
                          <Text fontSize="sm" color="gray.400">-</Text>
                        )}
                      </Td>
                    </Tr>
                  ))}
                  
                  {/* Check Payments Totals Row */}
                  {data.check_totals && (
                    <Tr bg="purple.100" fontWeight="bold" borderTop="2px" borderColor="purple.400">
                      <Td border="1px" borderColor="purple.400" textAlign="center" p={3}>
                        <Text fontWeight="bold" color="purple.700">GENEL TOPLAM</Text>
                      </Td>
                      <Td border="1px" borderColor="purple.400" p={3}></Td>
                      <Td border="1px" borderColor="purple.400" p={3}></Td>
                      
                      {/* Daily Check Totals - Show TL amounts */}
                      {['pazartesi', 'sali', 'carsamba', 'persembe', 'cuma', 'cumartesi', 'pazar'].map((day) => (
                        <Td key={day} border="1px" borderColor="purple.400" textAlign="right" p={3}>
                          {data.check_totals[day]?.tl > 0 ? (
                            <Text fontWeight="bold" color="purple.700">
                              ₺{(data.check_totals[day].tl || 0).toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                            </Text>
                          ) : (
                            <Text color="gray.400">-</Text>
                          )}
                        </Td>
                      ))}
                      
                      {/* Total Check Amount - TL Column */}
                      <Td border="1px" borderColor="purple.400" textAlign="right" p={3} bg="purple.200">
                        {data.check_totals.genel_toplam?.tl > 0 ? (
                          <Text fontWeight="bold" color="purple.700" fontSize="md">
                            ₺{(data.check_totals.genel_toplam.tl || 0).toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                          </Text>
                        ) : (
                          <Text color="gray.400">-</Text>
                        )}
                      </Td>
                      
                      {/* Total Check Amount - USD Column */}
                      <Td border="1px" borderColor="purple.400" textAlign="right" p={3} bg="purple.200">
                        {data.check_totals.genel_toplam?.usd > 0 ? (
                          <Text fontWeight="bold" color="purple.700" fontSize="md">
                            ${(data.check_totals.genel_toplam.usd || 0).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                          </Text>
                        ) : (
                          <Text color="gray.400">-</Text>
                        )}
                      </Td>
                    </Tr>
                  )}
                </Tbody>
              </Table>
            </Box>
          </Box>
        )}
        
        {/* Report Summary Footer */}
        <Box py={4} mt={6} textAlign="center" bg="gray.50" borderRadius="md">
          <HStack justify="center">
            <Text fontWeight="bold">Week Total (USD):</Text>
            {data.week_totals && data.week_totals.genel_toplam?.usd > 0 ? (
              <HStack spacing={3}>
                <Badge colorScheme="green" fontSize="md" px={3} py={1}>
                  ${data.week_totals.genel_toplam.usd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                </Badge>
                {data.week_totals.genel_toplam.original_currencies && data.week_totals.genel_toplam.original_currencies.includes('TL') && (
                  <Badge colorScheme="blue" fontSize="sm" px={2} py={1}>
                    Includes TL
                  </Badge>
                )}
                {data.week_totals.genel_toplam.original_currencies && data.week_totals.genel_toplam.original_currencies.includes('EUR') && (
                  <Badge colorScheme="purple" fontSize="sm" px={2} py={1}>
                    Includes EUR
                  </Badge>
                )}
              </HStack>
            ) : (
              <Badge colorScheme="gray" fontSize="md" px={3} py={1}>
                No payment data found for this week
              </Badge>
            )}
          </HStack>
          
          {data.week_totals && data.week_totals.genel_toplam?.usd > 0 && (
            <Text fontSize="sm" color="gray.600" mt={2}>
              Week {data.week_number || selectedWeek} • {data.weekly_report.length} customers
            </Text>
          )}
        </Box>
        
        <Text fontSize="xs" color="gray.500" mt={3} textAlign="center">
          All amounts displayed in USD • TL and EUR payments converted to USD • 
          <Text as="span" color="blue.600">TL</Text> and <Text as="span" color="purple.600">EUR</Text> indicators show original payment currencies
        </Text>

        {/* Summary Tables Section */}
        <Box mt={6} w="100%">
          <VStack spacing={4} align="stretch">
            
            {/* Table 1: Ödeme Nedeni Summary */}
            <Box>
              <Heading size="sm" mb={3} textAlign="center" color="blue.700" fontWeight="600">
                Ödeme Nedeni Özeti
              </Heading>
              <Box 
                overflowX="hidden" 
                bg="white" 
                borderRadius="lg" 
                border="1px" 
                borderColor="blue.200" 
                boxShadow="lg"
                w="100%" 
                mx={0}
              >
                <Table 
                  variant="simple" 
                  size="xs" 
                  w="100%" 
                  style={{ tableLayout: 'fixed' }}
                  fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif"
                >
                  <Thead>
                    <Tr>
                      <Th border="1px" borderColor="blue.200" textAlign="left" p={2} bg="blue.600" color="white" w="40%">
                        <Text fontSize="xs" fontWeight="bold">Ödeme Nedeni</Text>
                      </Th>
                      <Th border="1px" borderColor="blue.200" textAlign="center" p={2} bg="blue.600" color="white" w="30%">
                        <Text fontSize="xs" fontWeight="bold">Toplam TL</Text>
                      </Th>
                      <Th border="1px" borderColor="blue.200" textAlign="center" p={2} bg="blue.600" color="white" w="30%">
                        <Text fontSize="xs" fontWeight="bold">Toplam USD</Text>
                      </Th>
                    </Tr>
                  </Thead>
                  <Tbody>
                    <Tr _hover={{ bg: "blue.25" }}>
                      <Td border="1px" borderColor="blue.200" p={2}>
                        <Text fontSize="xs" fontWeight="500" color="gray.800">Banka Havalesi</Text>
                      </Td>
                      <Td border="1px" borderColor="blue.200" textAlign="center" p={2}>
                        <Text fontSize="xs" fontWeight="500" color="gray.800">
                          {data.summary_tables?.payment_method_summary?.['Banka Havalesi']?.tl?.toLocaleString('tr-TR', { minimumFractionDigits: 0, maximumFractionDigits: 0 }) || '-'}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="blue.200" textAlign="center" p={2}>
                        <Text fontSize="xs" fontWeight="500" color="gray.800">
                          ${data.summary_tables?.payment_method_summary?.['Banka Havalesi']?.usd?.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 }) || '-'}
                        </Text>
                      </Td>
                    </Tr>
                    <Tr _hover={{ bg: "blue.25" }}>
                      <Td border="1px" borderColor="gray.300" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">Nakit</Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="right" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          {data.summary_tables?.payment_method_summary?.['Nakit']?.tl?.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="right" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.payment_method_summary?.['Nakit']?.usd?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                    </Tr>
                    <Tr _hover={{ bg: "gray.50" }}>
                      <Td border="1px" borderColor="gray.300" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">Çek</Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="right" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          {data.summary_tables?.payment_method_summary?.['Çek']?.tl?.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="right" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.payment_method_summary?.['Çek']?.usd?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                    </Tr>
                    <Tr bg="green.50" _hover={{ bg: "green.100" }}>
                      <Td border="1px" borderColor="gray.300" p={3}>
                        <Text fontSize="sm" fontWeight="bold" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">Genel Toplam</Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="right" p={3}>
                        <Text fontSize="sm" fontWeight="bold" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          {data.summary_tables?.payment_method_summary?.['Genel Toplam']?.tl?.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="right" p={3}>
                        <Text fontSize="sm" fontWeight="bold" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.payment_method_summary?.['Genel Toplam']?.usd?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                    </Tr>
                  </Tbody>
                </Table>
              </Box>
            </Box>

            {/* Table 2: Weekly Summary */}
            <Box>
              <Heading size="md" mb={4} textAlign="center" color="green.600">
                Haftalık Toplam Özeti
              </Heading>
              <Box 
                overflowX="hidden" 
                bg="white" 
                borderRadius="md" 
                border="1px" 
                borderColor="gray.200" 
                w="100%" 
                mx={0}
              >
                <Table 
                  variant="simple" 
                  size="sm" 
                  w="100%" 
                  style={{ tableLayout: 'auto' }}
                  fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif"
                >
                  <Thead>
                    <Tr>
                      <Th border="1px" borderColor="gray.300" textAlign="left" p={3} bg="green.50">
                        <Text fontSize="sm" fontWeight="bold" color="gray.700">Dönem</Text>
                      </Th>
                      <Th border="1px" borderColor="gray.300" textAlign="center" p={3} bg="green.50">
                        <Text fontSize="sm" fontWeight="bold" color="gray.700">USD</Text>
                      </Th>
                    </Tr>
                  </Thead>
                  <Tbody>
                    <Tr _hover={{ bg: "gray.50" }}>
                      <Td border="1px" borderColor="gray.300" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">HAFTALIK MKM</Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.periodic_summary?.weekly?.['HAFTALIK MKM']?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                    </Tr>
                    <Tr _hover={{ bg: "gray.50" }}>
                      <Td border="1px" borderColor="gray.300" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">HAFTALIK MSM</Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.periodic_summary?.weekly?.['HAFTALIK MSM']?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                    </Tr>
                    <Tr bg="blue.50" _hover={{ bg: "blue.100" }}>
                      <Td border="1px" borderColor="gray.300" p={3}>
                        <Text fontSize="sm" fontWeight="bold" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">TOPLAM</Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontWeight="bold" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.periodic_summary?.weekly?.['TOPLAM']?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                    </Tr>
                  </Tbody>
                </Table>
              </Box>
            </Box>

            {/* Table 3: Monthly Summary */}
            <Box>
              <Heading size="sm" mb={3} textAlign="center" color="orange.700" fontWeight="600">
                Aylık Toplam Özeti
              </Heading>
              <Box 
                overflowX="hidden" 
                bg="white" 
                borderRadius="lg" 
                border="1px" 
                borderColor="orange.200" 
                boxShadow="lg"
                w="100%" 
                mx={0}
              >
                <Table 
                  variant="simple" 
                  size="xs" 
                  w="100%" 
                  style={{ tableLayout: 'fixed' }}
                  fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif"
                >
                  <Thead>
                    <Tr>
                      <Th border="1px" borderColor="orange.200" textAlign="left" p={2} bg="orange.600" color="white" w="50%">
                        <Text fontSize="xs" fontWeight="bold">Dönem</Text>
                      </Th>
                      <Th border="1px" borderColor="orange.200" textAlign="center" p={2} bg="orange.600" color="white" w="50%">
                        <Text fontSize="xs" fontWeight="bold">USD</Text>
                      </Th>
                    </Tr>
                  </Thead>
                  <Tbody>
                    <Tr _hover={{ bg: "gray.50" }}>
                      <Td border="1px" borderColor="gray.300" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">MKM AYLIK TOPLAM</Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.collection_details?.['TOPLAM']?.mkm?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '$0.00'}
                        </Text>
                      </Td>
                    </Tr>
                    <Tr _hover={{ bg: "gray.50" }}>
                      <Td border="1px" borderColor="gray.300" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">MSM AYLIK TOPLAM</Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.collection_details?.['TOPLAM']?.msm?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '$0.00'}
                        </Text>
                      </Td>
                    </Tr>
                    <Tr bg="orange.50" _hover={{ bg: "orange.100" }}>
                      <Td border="1px" borderColor="gray.300" p={3}>
                        <Text fontSize="sm" fontWeight="bold" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">GENEL TOPLAM</Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontWeight="bold" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${((data.summary_tables?.collection_details?.['TOPLAM']?.mkm || 0) + (data.summary_tables?.collection_details?.['TOPLAM']?.msm || 0)).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                      </Td>
                    </Tr>
                  </Tbody>
                </Table>
              </Box>
            </Box>

            {/* Table 4: Payment Details */}
            <Box>
              <Heading size="sm" mb={3} textAlign="center" color="purple.700" fontWeight="600">
                Tahsilat Detayları
              </Heading>
              <Box 
                overflowX="hidden" 
                bg="white" 
                borderRadius="lg" 
                border="1px" 
                borderColor="purple.200" 
                boxShadow="lg"
                w="100%" 
                mx={0}
              >
                <Table 
                  variant="simple" 
                  size="xs" 
                  w="100%" 
                  style={{ tableLayout: 'fixed' }}
                  fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif"
                >
                  <Thead>
                    <Tr>
                      <Th border="1px" borderColor="purple.200" textAlign="left" p={2} bg="purple.600" color="white" w="25%">
                        <Text fontSize="xs" fontWeight="bold">USD</Text>
                      </Th>
                      <Th border="1px" borderColor="purple.200" textAlign="center" p={2} bg="purple.600" color="white" w="25%">
                        <Text fontSize="xs" fontWeight="bold">MKM AYLIK</Text>
                      </Th>
                      <Th border="1px" borderColor="purple.200" textAlign="center" p={2} bg="purple.600" color="white" w="25%">
                        <Text fontSize="xs" fontWeight="bold">MSM AYLIK</Text>
                      </Th>
                      <Th border="1px" borderColor="purple.200" textAlign="center" p={2} bg="purple.600" color="white" w="25%">
                        <Text fontSize="xs" fontWeight="bold">TOPLAM</Text>
                      </Th>
                    </Tr>
                  </Thead>
                  <Tbody>
                    <Tr _hover={{ bg: "gray.50" }}>
                      <Td border="1px" borderColor="gray.300" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">CARŞI</Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.collection_details?.['CARŞI']?.mkm?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '$0.00'}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.collection_details?.['CARŞI']?.msm?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '$0.00'}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3} bg="blue.50">
                        <Text fontSize="sm" fontWeight="bold" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${((data.summary_tables?.collection_details?.['CARŞI']?.mkm || 0) + (data.summary_tables?.collection_details?.['CARŞI']?.msm || 0)).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                      </Td>
                    </Tr>
                    <Tr _hover={{ bg: "gray.50" }}>
                      <Td border="1px" borderColor="gray.300" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">KUYUMCUKENT</Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.collection_details?.['KUYUMCUKENT']?.mkm?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.collection_details?.['KUYUMCUKENT']?.msm?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3} bg="blue.50">
                        <Text fontSize="sm" fontWeight="bold" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${((data.summary_tables?.collection_details?.['KUYUMCUKENT']?.mkm || 0) + (data.summary_tables?.collection_details?.['KUYUMCUKENT']?.msm || 0)).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                      </Td>
                    </Tr>
                    <Tr _hover={{ bg: "gray.50" }}>
                      <Td border="1px" borderColor="gray.300" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">OFİS</Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.collection_details?.['OFİS']?.mkm?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.collection_details?.['OFİS']?.msm?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3} bg="blue.50">
                        <Text fontSize="sm" fontWeight="bold" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${((data.summary_tables?.collection_details?.['OFİS']?.mkm || 0) + (data.summary_tables?.collection_details?.['OFİS']?.msm || 0)).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                      </Td>
                    </Tr>
                    <Tr _hover={{ bg: "gray.50" }}>
                      <Td border="1px" borderColor="gray.300" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">BANKA HAVALESİ</Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.collection_details?.['BANKA HAVALESİ']?.mkm?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.collection_details?.['BANKA HAVALESİ']?.msm?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3} bg="blue.50">
                        <Text fontSize="sm" fontWeight="bold" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${((data.summary_tables?.collection_details?.['BANKA HAVALESİ']?.mkm || 0) + (data.summary_tables?.collection_details?.['BANKA HAVALESİ']?.msm || 0)).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                      </Td>
                    </Tr>
                    <Tr _hover={{ bg: "gray.50" }}>
                      <Td border="1px" borderColor="gray.300" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">ÇEK</Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${(data.summary_tables?.collection_details?.['ÇEK']?.mkm || 0).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${(data.summary_tables?.collection_details?.['ÇEK']?.msm || 0).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3} bg="blue.50">
                        <Text fontSize="sm" fontWeight="bold" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${((data.summary_tables?.collection_details?.['ÇEK']?.mkm || 0) + (data.summary_tables?.collection_details?.['ÇEK']?.msm || 0)).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                      </Td>
                    </Tr>
                    <Tr _hover={{ bg: "gray.50" }}>
                      <Td border="1px" borderColor="gray.300" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">TOPLAM</Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.collection_details?.['TOPLAM']?.mkm?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.collection_details?.['TOPLAM']?.msm?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3} bg="blue.50">
                        <Text fontSize="sm" fontWeight="bold" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${((data.summary_tables?.collection_details?.['TOPLAM']?.mkm || 0) + (data.summary_tables?.collection_details?.['TOPLAM']?.msm || 0)).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                      </Td>
                    </Tr>
                    <Tr bg="purple.50" _hover={{ bg: "purple.100" }}>
                      <Td border="1px" borderColor="gray.300" p={3}>
                        <Text fontSize="sm" fontWeight="bold" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">GENEL TOPLAM</Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontWeight="bold" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.collection_details?.['GENEL TOPLAM']?.mkm?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3}>
                        <Text fontSize="sm" fontWeight="bold" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${data.summary_tables?.collection_details?.['GENEL TOPLAM']?.msm?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '-'}
                        </Text>
                      </Td>
                      <Td border="1px" borderColor="gray.300" textAlign="center" p={3} bg="purple.200">
                        <Text fontSize="md" fontWeight="bold" color="purple.800" fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif">
                          ${((data.summary_tables?.collection_details?.['GENEL TOPLAM']?.mkm || 0) + (data.summary_tables?.collection_details?.['GENEL TOPLAM']?.msm || 0)).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </Text>
                      </Td>
                    </Tr>
                  </Tbody>
                </Table>
              </Box>
            </Box>

            {/* Table 5: Monthly Daily Breakdown */}
            <Box>
              <Heading size="sm" mb={3} textAlign="center" color="blue.700" fontWeight="600">
                Eylül 2025 Günlük Tahsilatlar
              </Heading>
              <Box 
                overflowX="hidden" 
                bg="white" 
                borderRadius="lg" 
                border="1px" 
                borderColor="blue.200" 
                boxShadow="lg"
                w="100%" 
                mx={0}
              >
                <Table 
                  variant="simple" 
                  size="xs" 
                  w="100%" 
                  style={{ tableLayout: 'fixed' }}
                  fontFamily="Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif"
                >
                  <Thead>
                    {/* First row: Days 1-15 */}
                    <Tr>
                      {Array.from({ length: 15 }, (_, i) => (
                        <Th 
                          key={i + 1} 
                          border="1px" 
                          borderColor="blue.200" 
                          textAlign="center" 
                          p={1} 
                          bg="blue.600"
                          color="white"
                          fontSize="10px"
                          fontWeight="bold"
                          w="6.66%"
                        >
                          {(i + 1).toString().padStart(2, '0')}/09
                        </Th>
                      ))}
                    </Tr>
                  </Thead>
                  <Tbody>
                    <Tr _hover={{ bg: "blue.25" }}>
                      {/* First row values: Days 1-15 */}
                      {Array.from({ length: 15 }, (_, i) => {
                        const day = (i + 1).toString().padStart(2, '0');
                        const dateKey = `${day}-09-2025`;
                        const amount = data.monthly_daily_totals?.daily_totals?.[dateKey] || 0;
                        return (
                          <Td 
                            key={i + 1} 
                            border="1px" 
                            borderColor="blue.200" 
                            textAlign="center" 
                            p={1}
                            bg={amount > 0 ? "green.100" : "gray.100"}
                            fontSize="9px"
                            fontWeight="500"
                          >
                            <Text fontSize="9px" color={amount > 0 ? "green.800" : "gray.500"}>
                              {amount > 0 ? `$${Math.round(amount).toLocaleString()}` : '-'}
                            </Text>
                          </Td>
                        );
                      })}
                    </Tr>
                  </Tbody>
                  <Thead>
                    {/* Second row: Days 16-30 */}
                    <Tr>
                      {Array.from({ length: 15 }, (_, i) => (
                        <Th 
                          key={i + 16} 
                          border="1px" 
                          borderColor="blue.200" 
                          textAlign="center" 
                          p={1} 
                          bg="blue.600"
                          color="white"
                          fontSize="10px"
                          fontWeight="bold"
                          w="6.66%"
                        >
                          {(i + 16).toString().padStart(2, '0')}/09
                        </Th>
                      ))}
                    </Tr>
                  </Thead>
                  <Tbody>
                    <Tr _hover={{ bg: "blue.25" }}>
                      {/* Second row values: Days 16-30 */}
                      {Array.from({ length: 15 }, (_, i) => {
                        const day = (i + 16).toString().padStart(2, '0');
                        const dateKey = `${day}-09-2025`;
                        const amount = data.monthly_daily_totals?.daily_totals?.[dateKey] || 0;
                        return (
                          <Td 
                            key={i + 16} 
                            border="1px" 
                            borderColor="blue.200" 
                            textAlign="center" 
                            p={1}
                            bg={amount > 0 ? "green.100" : "gray.100"}
                            fontSize="9px"
                            fontWeight="500"
                          >
                            <Text fontSize="9px" color={amount > 0 ? "green.800" : "gray.500"}>
                              {amount > 0 ? `$${Math.round(amount).toLocaleString()}` : '-'}
                            </Text>
                          </Td>
                        );
                      })}
                    </Tr>
                  </Tbody>
                </Table>
              </Box>
            </Box>

          </VStack>
        </Box>
      </Box>
    );
  };

  return (
    <Box w="100%">
      <Flex justifyContent="space-between" alignItems="center" mb={6}>
        <Heading size="lg">Weekly Collections Reports</Heading>
        <HStack spacing={3}>
          <Button 
            colorScheme="teal" 
            size="sm"
            onClick={() => {
              toast({
                title: "Manual test",
                description: `State debug: weeklyReports.length=${weeklyReports.length}, selectedYear=${selectedYear}, selectedMonth=${selectedMonth}`,
                status: "info",
                duration: 5000,
                isClosable: true,
              });
              fetchAndLoadAllReports();
            }}
          >
            Test Fetch
          </Button>
          <Button 
            colorScheme="brand" 
            leftIcon={<FiRefreshCw />}
            onClick={handleRegenerateReports}
            isLoading={isLoadingReportList}
          >
            Refresh Data
          </Button>
        </HStack>
      </Flex>
      
      <Card w="100%">
        <CardHeader>
          <Flex justify="space-between" align="center">
            <Heading size="md">Weekly Collections Table</Heading>
            <Text fontSize="sm" color="gray.600">
              Select a week to view detailed collections
            </Text>
          </Flex>
        </CardHeader>
        <CardBody w="100%">
          <Stack spacing={6} w="100%">
            {isLoadingReportList ? (
              <Flex justify="center" py={8} direction="column" align="center">
                <Spinner size="xl" mb={4} />
                <Text>Loading available reports...</Text>
              </Flex>
            ) : error && weeklyReports.length === 0 ? (
              <Box p={8} textAlign="center">
                <Alert status="error" mb={4}>
                  <AlertIcon />
                  {error}
                </Alert>
                <Button 
                  colorScheme="brand" 
                  leftIcon={<FiRefreshCw />}
                  onClick={() => fetchWeeklyReportsList(true)}
                  mt={4}
                >
                  Retry Loading Reports
                </Button>
              </Box>
            ) : weeklyReports.length === 0 ? (
              <Box p={8} textAlign="center">
                <Alert status="info" mb={4}>
                  <AlertIcon />
                  No weekly reports available. Import some payment data first.
                </Alert>
                <Button 
                  colorScheme="brand" 
                  onClick={() => window.location.href = '/import-new'}
                >
                  Go to Import Page
                </Button>
              </Box>
            ) : (
              <>
                {/* Year and Month Selection */}
                <HStack spacing={4} wrap="wrap" mb={4}>
                  <Box>
                    <FormLabel htmlFor="year-select" mb={2}>Year:</FormLabel>
                    <Select 
                      id="year-select"
                      value={selectedYear}
                      onChange={handleYearChange}
                      width="auto"
                      minWidth="120px"
                    >
                      {availableYears.map(year => (
                        <option key={year} value={year}>{year}</option>
                      ))}
                    </Select>
                  </Box>
                  
                  <Box>
                    <FormLabel htmlFor="month-select" mb={2}>Month:</FormLabel>
                    <Select 
                      id="month-select"
                      value={selectedMonth}
                      onChange={handleMonthChange}
                      width="auto"
                      minWidth="150px"
                    >
                      {availableMonths.map(month => {
                        // Convert numeric month (1-12) to proper month name (0-based index)
                        const monthIndex = Math.max(0, (month || 1) - 1);
                        const monthName = MONTHS[monthIndex];
                        return (
                          <option key={month} value={month}>
                            {monthName || `Month ${month}`}
                          </option>
                        );
                      })}
                    </Select>
                  </Box>
                </HStack>
                
                <Divider />
                
                {/* Week Tabs and Report Display */}
                {weeksInSelectedMonth.length === 0 ? (
                  <Alert status="info">
                    <AlertIcon />
                    No weekly reports available for the selected month.
                  </Alert>
                ) : (
                  <Tabs index={selectedWeek ? weeksInSelectedMonth.findIndex(w => w.week_number === selectedWeek) : 0} 
                        onChange={(index) => setSelectedWeek(weeksInSelectedMonth[index]?.week_number || null)}>
                    <TabList>
                      {weeksInSelectedMonth.map((week) => (
                        <Tab key={week.week_number} isDisabled={!week.has_data}>
                          Week {week.week_number}
                        </Tab>
                      ))}
                    </TabList>
                    
                    <TabPanels>
                      {weeksInSelectedMonth.map((week) => (
                        <TabPanel key={week.week_number} p={4}>
                          {/* Week Info and Export Menu */}
                          <Flex justify="space-between" align="center" mb={4}>
                            <Text fontWeight="medium">
                              {week.formatted_date}
                            </Text>
                            <Menu>
                              <MenuButton
                                as={Button}
                                rightIcon={<ChevronDownIcon />}
                                colorScheme="brand"
                                size="sm"
                                isDisabled={!allWeekReports[week.week_number] || !allWeekReports[week.week_number].success || 
                                           Object.keys(isExporting).some(key => key.startsWith(`${week.week_number}-`))}
                              >
                                {Object.keys(isExporting).some(key => key.startsWith(`${week.week_number}-`)) 
                                  ? 'Exporting...' 
                                  : 'Export Report'}
                              </MenuButton>
                              <MenuList>
                                <MenuItem 
                                  icon={isExporting[`${week.week_number}-xlsx`] ? <Spinner size="sm" /> : <DownloadIcon />} 
                                  onClick={() => handleExport('xlsx', week.week_number)}
                                  isDisabled={isExporting[`${week.week_number}-xlsx`]}
                                >
                                  Export as Excel
                                </MenuItem>
                                <MenuItem 
                                  icon={isExporting[`${week.week_number}-csv`] ? <Spinner size="sm" /> : <DownloadIcon />} 
                                  onClick={() => handleExport('csv', week.week_number)}
                                  isDisabled={isExporting[`${week.week_number}-csv`]}
                                >
                                  Export as CSV
                                </MenuItem>
                                <MenuItem 
                                  icon={isExporting[`${week.week_number}-json`] ? <Spinner size="sm" /> : <DownloadIcon />} 
                                  onClick={() => handleExport('json', week.week_number)}
                                  isDisabled={isExporting[`${week.week_number}-json`]}
                                >
                                  Export as JSON
                                </MenuItem>
                              </MenuList>
                            </Menu>
                          </Flex>
                          
                          <Divider mb={4} />
                          
                          {/* Report Content */}
                          {!allWeekReports[week.week_number] ? (
                            <Flex justify="center" py={8} direction="column" align="center">
                              <Spinner size="xl" mb={4} />
                              <Text>Loading report data for Week {week.week_number}...</Text>
                            </Flex>
                          ) : allWeekReports[week.week_number].error ? (
                            <Alert status="error">
                              <AlertIcon />
                              {allWeekReports[week.week_number].error}
                            </Alert>
                          ) : !allWeekReports[week.week_number].success ? (
                            <Alert status="error">
                              <AlertIcon />
                              Failed to load report data for Week {week.week_number}
                            </Alert>
                          ) : (
                            renderWeeklyCollectionsReport(allWeekReports[week.week_number])
                          )}
                        </TabPanel>
                      ))}
                    </TabPanels>
                  </Tabs>
                )}
              </>
            )}
          </Stack>
        </CardBody>
      </Card>
    </Box>
  );
};

export default ReportsPage;